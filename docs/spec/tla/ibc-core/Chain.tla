---------------------------- MODULE Chain ----------------------------

EXTENDS Integers, FiniteSets, IBCCoreDefinitions, 
        ICS02ClientHandlers, ICS03ConnectionHandlers
        
CONSTANTS MaxHeight, \* maximal chain height
          ChainID, \* chain identifier
          MaxVersion \* maximal connection version (we assume versions are integers)

VARIABLES chainStore, \* chain store, containing client heights, a connection end 
          incomingDatagrams, \* set of incoming datagrams
          history \* history variable

vars == <<chainStore, incomingDatagrams, history>>
Heights == 1..MaxHeight \* set of possible heights of the chains in the system          

(***************************************************************************
 Client update operators
 ***************************************************************************)
\* Update the clients on chain with chainID, 
\* using the client datagrams generated by the relayer      
\* (Handler operators defined in ICS02ClientHandlers.tla)
LightClientUpdate(chainID, store, datagrams) == 
    \* create clients
    LET clientCreatedStore == HandleCreateClient(chainID, store, datagrams) IN
    \* update clients
    LET clientUpdatedStore == HandleClientUpdate(chainID, clientCreatedStore, datagrams) IN

    clientUpdatedStore

(***************************************************************************
 Connection update operators
 ***************************************************************************)
\* Update the connections on chain with chainID, 
\* using the connection datagrams generated by the relayer
\* (Handler operators defined in ICS03ConnectionHandlers.tla)
ConnectionUpdate(chainID, store, datagrams) ==
    \* update the chain store with "ConnOpenInit" datagrams
    LET connOpenInitStore == HandleConnOpenInit(chainID, store, datagrams) IN
    
    \* update the chain store with "ConnOpenTry" datagrams
    LET connOpenTryStore == HandleConnOpenTry(chainID, connOpenInitStore, datagrams) IN
    
    \* update the chain store with "ConnOpenAck" datagrams
    LET connOpenAckStore == HandleConnOpenAck(chainID, connOpenTryStore, datagrams) IN
    
    \* update the chain store with "ConnOpenConfirm" datagrams
    LET connOpenConfirmStore == HandleConnOpenConfirm(chainID, connOpenAckStore, datagrams) IN
    
    \* output the updated chain store 
    connOpenConfirmStore
    
(***************************************************************************
 Chain update operators
 ***************************************************************************)
\* Update chainID with the received datagrams
\* Supports ICS02 (Clients), ICS03 (Connections).
UpdateChainStore(chainID, datagrams) == 
    
    \* ICS02: Client updates
    LET clientUpdatedStore == LightClientUpdate(chainID, chainStore, datagrams) IN

    \* ICS03: Connection updates
    LET connectionUpdatedStore == ConnectionUpdate(chainID, clientUpdatedStore, datagrams) IN

    \* update height
    LET updatedChainStore == 
        IF /\ chainStore /= connectionUpdatedStore
           /\ chainStore.height + 1 \in Heights 
        THEN [connectionUpdatedStore EXCEPT !.height = chainStore.height + 1]
        ELSE connectionUpdatedStore
    IN
    updatedChainStore

(***************************************************************************
 Chain actions
 ***************************************************************************)       
\* Advance the height of the chain until MaxHeight is reached
AdvanceChain ==
    /\ chainStore.height + 1 \in Heights
    /\ chainStore' = [chainStore EXCEPT !.height = chainStore.height + 1]
    /\ UNCHANGED <<incomingDatagrams, history>>

\* Handle the datagrams and update the chain state        
HandleIncomingDatagrams ==
    /\ \/ incomingDatagrams /= AsSetDatagrams({})
    /\ LET updatedChainStore == UpdateChainStore(ChainID, incomingDatagrams) IN
        /\ chainStore' = updatedChainStore
        /\ incomingDatagrams' = AsSetDatagrams({})
        /\ history' = CASE chainStore'.connectionEnd.state = "INIT" 
                                    -> [history EXCEPT !.connInit = TRUE]
                            [] chainStore'.connectionEnd.state = "TRYOPEN"
                                    -> [history EXCEPT !.connTryOpen = TRUE] 
                            [] chainStore'.connectionEnd.state = "OPEN"
                                    -> [history EXCEPT !.connOpen = TRUE] 
                            [] OTHER 
                                    -> history

(***************************************************************************
 Specification
 ***************************************************************************)
\* Initial state predicate
\* Initially
\*  - each chain is initialized to some element of the set
\*    InitChainStores (defined in IBCCoreDefinitions.tla)
\*  - pendingDatagrams for each chain is empty
Init == 
    /\ chainStore \in InitChainStore(MaxVersion)
    /\ incomingDatagrams = AsSetDatagrams({})
    /\ history = InitHistory

\* Next state action
\* The chain either
\*  - advances its height
\*  - receives datagrams and updates its state
Next ==
    \/ AdvanceChain 
    \/ HandleIncomingDatagrams
    \/ UNCHANGED vars
        
Fairness ==
    /\ WF_vars(AdvanceChain)
    /\ WF_vars(HandleIncomingDatagrams)        
        
(***************************************************************************
 Invariants
 ***************************************************************************)
\* Type invariant   
\* ChainStores, Datagrams are defined in IBCCoreDefinitions.tla        
TypeOK ==    
    /\ chainStore \in ChainStores(MaxHeight, MaxVersion)
    /\ incomingDatagrams \in SUBSET Datagrams(MaxHeight, MaxVersion)
    /\ history \in Histories
    
(***************************************************************************
 Properties
 ***************************************************************************)    
\* it ALWAYS holds that the height of the chain does not EVENTUALLY decrease
HeightDoesntDecrease ==
    [](\A h \in Heights : chainStore.height = h 
        => <>(chainStore.height >= h))

=============================================================================
\* Modification History
\* Last modified Tue Dec 01 10:40:51 CET 2020 by ilinastoilkovska
\* Created Fri Jun 05 16:56:21 CET 2020 by ilinastoilkovska
